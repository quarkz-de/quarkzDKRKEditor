unit dkrk.Entities;

interface

uses
  System.SysUtils, System.Generics.Collections,
  Spring, Spring.Collections, Spring.Persistence.Mapping.Attributes,
  dkrk.Ingredients;

type
  TCategory = class;

  [Entity]
  [Table('Recipes')]
  TRecipe = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey])][AutoGenerated]
    FId: Integer;
    FName: String;
    FAssignedCategory: Integer;
    FCount: Integer;
    FCountText: String;
    FIngredients: String;
    FSource: String;
    FPreparation: String;
    FPrepDuration: Integer;
    FFavorit: Integer;
    FPicCount: Integer;
    FRating: Integer;
    FDiffRating: Integer;
    FAddA: String;
    FAddB: String;
    FAddC: String;
    FAddD: String;
    FAddE: String;
    FCategory: TCategory;
    function GetIsFavorit: Boolean;
    procedure SetIsFavorit(const AValue: Boolean);
    function GetIngredientsList: TIngredientsList;
    procedure SetIngredientsList(const AValue: TIngredientsList);
  public
    destructor Destroy; override;
    property Id: Integer read FId;
    [Column('NAME')]
    property Name: String read FName write FName;
    [Column('ASSIGNEDCATEGORY')]
    [ForeignJoinColumn('AssignedCategory', 'Categories', 'Id', [fsOnDeleteCascade, fsOnUpdateCascade])]
    property AssignedCategory: Integer read FAssignedCategory write FAssignedCategory;
    [Column('COUNT')]
    property Count: Integer read FCount write FCount;
    [Column('COUNTTEXT')]
    property CountText: String read FCountText write FCountText;
    [Column('INGREDIENTS')]
    property Ingredients: String read FIngredients write FIngredients;
    [Column('SOURCE')]
    property Source: String read FSource write FSource;
    [Column('PREPARATION')]
    property Preparation: String read FPreparation write FPreparation;
    [Column('PREPDURATION')]
    property PrepDuration: Integer read FPrepDuration write FPrepDuration;
    [Column('FAVORIT')]
    property Favorit: Integer read FFavorit write FFavorit;
    [Column('PICCOUNT')]
    property PicCount: Integer read FPicCount write FPicCount;
    [Column('RATING')]
    property Rating: Integer read FRating write FRating;
    [Column('DIFFRATING')]
    property DiffRating: Integer read FDiffRating write FDiffRating;
    [Column('ADDA')]  // Zugeordnete Kategorien (Komma-separiert)
    property AddA: String read FAddA write FAddA;
    [Column('ADDB')]
    property AddB: String read FAddB write FAddB;
    [Column('ADDC')]
    property AddC: String read FAddC write FAddC;
    [Column('ADDD')]
    property AddD: String read FAddD write FAddD;
    [Column('ADDE')]
    property AddE: String read FAddE write FAddE;
    [ManyToOne(False, [ckCascadeAll], 'AssignedCategory')]
    property Category: TCategory read FCategory write FCategory;

    property IsFavorit: Boolean read GetIsFavorit write SetIsFavorit;
    property IngredientsList: TIngredientsList read GetIngredientsList
      write SetIngredientsList;

    function ToString: String; override;
  end;

  [Entity]
  [Table('Categories')]
  TCategory = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey])][AutoGenerated]
    FId: Integer;
    FName: String;
    FAssignedCategory: Integer;
    [OneToMany(False, [ckCascadeAll])]
    FRecipes: Lazy<IList<TRecipe>>;
  public
    constructor Create;

    property Id: Integer read FId write FId;
    [Column('NAME')]
    property Name: String read FName write FName;
    [Column('ASSIGNEDCATEGORY')]
    property AssignedCategory: Integer read FAssignedCategory write FAssignedCategory;

    property Recipes: Lazy<IList<TRecipe>> read FRecipes write FRecipes;

    function ToString: String; override;
  end;

  [Entity]
  [Table('Ingredients')]
  TIngredientTemplate = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey])][AutoGenerated]
    FId: Integer;
    FName: String;
    FCount: Integer;
  public
    property Id: Integer read FId write FId;
    [Column('NAME')]
    property Name: String read FName write FName;
    [Column('COUNT')]
    property Count: Integer read FCount write FCount;
  end;

  [Entity]
  [Table('Units')]
  TUnitTemplate = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey])][AutoGenerated]
    FId: Integer;
    FName: String;
  public
    property Id: Integer read FId write FId;
    [Column('NAME')]
    property Name: String read FName write FName;
  end;

implementation

{$REGION 'TCategory'}

constructor TCategory.Create;
begin
  inherited;
  FRecipes := TCollections.CreateObjectList<TRecipe>;
end;

function TCategory.ToString: String;
begin
  Result := Name;
end;

{$ENDREGION}

{$REGION 'TRecipe'}

destructor TRecipe.Destroy;
begin
  if Assigned(FCategory) then
    begin
{$IFDEF AUTOREFCOUNT}
      FCategory.DisposeOf;
{$ENDIF}
      FCategory.Free;
    end;
  inherited;
end;

function TRecipe.GetIngredientsList: TIngredientsList;
var
  Serializer: IIngredientsSerializer;
begin
  Serializer := TIngredientsSerializer.Create;
  Result := Serializer.Deserialize(Ingredients);
end;

function TRecipe.GetIsFavorit: Boolean;
begin
  Result := Favorit = 1;
end;

procedure TRecipe.SetIngredientsList(const AValue: TIngredientsList);
var
  Serializer: IIngredientsSerializer;
begin
  Serializer := TIngredientsSerializer.Create;
  Ingredients := Serializer.Serialize(AValue);
end;

procedure TRecipe.SetIsFavorit(const AValue: Boolean);
begin
  if AValue then
    Favorit := 1
  else
    Favorit := 0;
end;

function TRecipe.ToString: String;
begin
  Result := Name;
end;

{$ENDREGION}

end.
